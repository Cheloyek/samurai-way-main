{"version":3,"file":"static/js/470.51ab5e65.chunk.js","mappings":"yKACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCchL,EAVmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,0BACP,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,UAAC,KAAD,CAASC,GAAIJ,EAAb,WAAmB,gBAAKK,IAAKN,EAAMO,MAAOP,EAAMQ,aCKxD,EARgB,SAACR,GAEb,OACQ,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMS,W,6BCDxCC,GAAeC,EAAAA,EAAAA,GAAiB,KAetC,GAAeC,EAAAA,EAAAA,GAAoC,CAC/CC,KAAM,2BADV,EAbqG,SAACb,GAClG,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACKC,EAAAA,EAAAA,IAA0C,qBAAsB,iBAAkB,CAACC,EAAAA,EAAUP,GAAeQ,EAAAA,OAEjH,0BACI,qDCmBhB,EAtBwC,SAAClB,GACrC,IAAImB,EAAQnB,EAAMoB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAY,SAAC,EAAD,CAAYhB,KAAMgB,EAAEhB,KAAiBN,GAAIsB,EAAEtB,IAAZsB,EAAEtB,OACjFuB,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAoB,SAAC,EAAD,CAASlB,QAASkB,EAAElB,SAAckB,EAAEzB,OAMlG,OACI,4BACI,gBAAKC,UAAWC,EAAAA,aAAhB,SACKiB,KAEL,gBAAKlB,UAAWC,EAAAA,YAChB,yBAAMqB,KACN,SAAC,EAAD,CAAgBX,SAXJ,SAACc,GACjB5B,EAAM6B,YAAYD,EAAOE,uB,oDCT7BC,EAA6B,SAACZ,GAAD,MAA0D,CACvFa,OAAQb,EAAMc,KAAKD,S,ICAvB,GAAeE,E,QAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAAChB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKE,CAACS,YAAaO,EAAAA,EAAAA,eDGpC,SAA+BC,GAUlC,OAFmCF,EAAAA,EAAAA,IAA4DJ,EAA4B,GAAxFI,EAPkC,SAACnC,GAClE,IAAKgC,EAAwBhC,EAAxBgC,OAAWM,GAAhB,OAA6BtC,EAA7B,GACA,OAAKgC,GAEM,SAACK,GAAD,UAAsBC,KAFb,SAAC,KAAD,CAAUjC,GAAI,gBCP1C,CAGEkC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__PtDJP\",\"dialogsItems\":\"Dialogs_dialogsItems__86K4t\",\"active\":\"Dialogs_active__hEHgi\",\"messages\":\"Dialogs_messages__v-zD5\",\"message\":\"Dialogs_message__Dr68z\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return <div>\r\n    <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}><img src={props.url}/>{props.name}</NavLink>\r\n    </div>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n\r\n    return (\r\n            <div className={s.message}>{props.message}</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {NewMessageFormValuesType} from \"../Dialogs\";\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst maxLength300 = maxLengthCreator(300)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>('Enter your message', \"newMessageBody\", [required, maxLength300], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({\r\n    form: 'dialog-add-message-form'\r\n})(AddMessageForm)","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {InitialStateType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\ntype OwnPropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map((d: any) => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map((m: MessageType) => <Message message={m.message} key={m.id}/>)\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}></div>\r\n            <div>{messagesElements}</div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React, {Component, ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType, StoreType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport function WithAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent:React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n            // if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <WrappedComponent {...restProps as unknown as WCP}/>\r\n    }\r\n\r\n    let ConnectAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n\r\n    return ConnectAuthRedirectComponent\r\n}\r\n\r\n","import React from \"react\";\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {sendMessage: actions.sendMessage}),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n"],"names":["props","path","id","className","s","to","src","url","name","message","maxLength300","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps","Dialogs"],"sourceRoot":""}
{"version":3,"file":"static/js/470.edbe8b0f.chunk.js","mappings":"mLACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCkBhL,EAVmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,0BACP,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,UAAC,KAAD,CAASC,GAAIJ,EAAb,WAAmB,gBAAKK,IAAKN,EAAMO,MAAOP,EAAMQ,aCExD,EARgB,SAACR,GAEb,OACQ,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMS,W,uCCNxCC,GAAeC,EAAAA,EAAAA,GAAiB,KAgBtC,GAAeC,EAAAA,EAAAA,GAAU,CACrBC,KAAM,2BADV,EAduB,SAACb,GACpB,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BAEI,SAACC,EAAA,EAAD,CAAOC,YAAa,qBAAsBC,UAAWC,EAAAA,EAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAeF,KAAM,sBAE7G,0BACI,qDCWhB,IA0EA,EA1EgB,SAACR,GACb,IAAIsB,EAAQtB,EAAMuB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAY,SAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAiBN,GAAIyB,EAAEzB,IAAZyB,EAAEzB,OACjF0B,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAoB,SAAC,EAAD,CAASrB,QAASqB,EAAErB,SAAcqB,EAAE5B,OA6BlG,OACI,4BACI,gBAAKC,UAAWC,EAAAA,aAAhB,SACKoB,KAEL,gBAAKrB,UAAWC,EAAAA,YAChB,yBAAMwB,KACN,SAAC,EAAD,CAAgBd,SAXJ,SAACiB,GACjB/B,EAAMgC,YAAYD,EAAOE,uB,0DC/C7BC,EAA6B,SAACZ,GAAD,MAAiD,CAC9Ea,OAAQb,EAAMc,KAAKD,SC0DvB,GAAeE,E,QAAAA,KACXC,EAAAA,EAAAA,KA9BkB,SAAChB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAKF,SAACgB,GACtB,MAAO,CAIHP,YAAa,SAACC,GACVM,GAASC,EAAAA,EAAAA,GAAmBP,UDzBA,SAACQ,GAAoB,IAC/CC,EAD8C,0IAEhD,WAEA,OAAO,SAACD,GAAD,UAAeE,KAAK3C,YAJqB,GACpB4C,EAAAA,WASpC,OAFwCN,EAAAA,EAAAA,IAASJ,EAATI,CAAsCI,KCiClF,CAGEG","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__PtDJP\",\"dialogsItems\":\"Dialogs_dialogsItems__86K4t\",\"active\":\"Dialogs_active__hEHgi\",\"messages\":\"Dialogs_messages__v-zD5\",\"message\":\"Dialogs_message__Dr68z\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsType} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\n\r\n\r\n// props id name <NavLink to='/dialogs/user2'>User 2</NavLink>\r\nconst DialogItem = (props: DialogsType) => {\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return <div>\r\n    <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}><img src={props.url}/>{props.name}</NavLink>\r\n    </div>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n}\r\n//1\r\n//props message <div className={s.message}>Hi</div> change to <NavLink to={path}>{props.name}</NavLink>\r\nconst Message = (props: MessagePropsType) => {\r\n\r\n    return (\r\n            <div className={s.message}>{props.message}</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message","import {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\n\r\nconst maxLength300 = maxLengthCreator(300)\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {/*<Field placeholder={'Enter your message'} name={'newMessageBody'} component={'textarea'}/>*/}\r\n                <Field placeholder={'Enter your message'} component={Textarea} validate={[required, maxLength300]} name={'newMessageBody'}/>\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'dialog-add-message-form'\r\n})(AddMessageForm)","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {StoreType} from \"../../redux/store\";\r\nimport {MessageType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\ntype DialogsPropsType = {\r\n    store: StoreType\r\n    // state: DialogPageType\r\n    // updateNewMessageText: (newMessage: any) => void\r\n    // addMessage: (newMessageText:string) => void\r\n    // dispatch: any\r\n}\r\n\r\n\r\nfunction AddMessageFormRedux(props: { onSubmit: (values: any) => void }) {\r\n    return null;\r\n}\r\n\r\n//2\r\nconst Dialogs = (props: any) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map((d: any) => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map((m: MessageType) => <Message message={m.message} key={m.id}/>)\r\n    //Ref - ссылка на любой элемент, в данном случае создание ссылки на элемент textarea\r\n    // let newMessageElement = React.createRef<HTMLTextAreaElement>()\r\n    //функция при нажатии на кнопку send message\r\n    // const onSendMessageClick = () => {\r\n    //     // если ссылки еще нет, то она ссылается ни на что, current? - если ссылка null,\r\n    //     // то зафиксирует null или undefined и не будет пытаться искать значение value\r\n    //     // let text = newMessageElement.current?.value\r\n    //     // props.addMessage('')\r\n    //     props.sendMessage()\r\n    //\r\n    // }\r\n    // let onNewMessageChange = (e: any) => {\r\n    //     // let textMessage = newMessageElement.current?.value      // текст сообщения который вводится в textarea\r\n    //     let body = e.target.value\r\n    //     // props.updateNewMessageText(textMessage)\r\n    //     // @ts-ignore\r\n    //     props.updateNewMessageBody(body)\r\n    // }\r\n    // if (props.isAuth === false) return <Redirect to={'/login'} />\r\n    // if (!props.isAuth) {\r\n    //     return <Redirect to={'/login'} />\r\n    // }\r\n    // alert(props.isAuth)\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}></div>\r\n            <div>{messagesElements}</div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n            {/*<div>*/}\r\n            {/*    <button onClick={onSendMessageClick}>Send message</button>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    )\r\n    // <div className={s.dialogs}>\r\n    //     <div className={s.dialogsItems}>\r\n    //         {dialogsElements}\r\n    //     </div>\r\n    //     <div className={s.messages}>\r\n    //         {/*<Message message={messages[0].message}/>*/}\r\n    //         {/*<Message message={messages[1].message}/>*/}\r\n    //         {/*<Message message={messages[2].message}/>*/}\r\n    //         <div>{messagesElements}</div>\r\n    //         <div>\r\n    //                 <textarea onChange={onNewMessageChange}\r\n    //                           placeholder='Enter your message'\r\n    //                     // ref={newMessageElement}\r\n    //                           value={newMessageBody}></textarea>\r\n    //         </div>\r\n    //         <div>\r\n    //             <button onClick={onSendMessageClick}>Send message</button>\r\n    //         </div>\r\n    //     </div>\r\n    //\r\n    // </div>\r\n    {/*)*/\r\n    }\r\n    {/*}*/\r\n    }\r\n}\r\n\r\n\r\nexport default Dialogs\r\n\r\n// ДО ИЗМЕНЕНИЯ КОД//////////////////////////////////////////////////////////////////////////\r\n// import React from \"react\";\r\n// import s from './Dialogs.module.css'\r\n// import DialogItem from \"./DialogItem/DialogsItem\";\r\n// import Message from \"./Message/Message\";\r\n// import\r\n//     {\r\n//         DialogPageType\r\n//     }\r\n// from \"../../redux/state\";\r\n//\r\n// type DialogsPropsType =\r\n//     {\r\n//     state: DialogPageType\r\n// }\r\n//\r\n// const Dialogs = (props: DialogsPropsType) => {\r\n//\r\n//     //Ref - ссылка на любой элемент, в данном случае создание ссылки на элемент textarea\r\n//     let newMessageElement = React.createRef<HTMLTextAreaElement>()\r\n//     //функция при нажатии на кнопку send message\r\n//     const addMessage = () => {\r\n//         // если ссылки еще нет, то она ссылается ни на что, current? - если ссылка null,\r\n//         // то зафиксирует null или undefined и не будет пытаться искать значение value\r\n//         let text = newMessageElement.current?.value\r\n//         alert(text)\r\n//     }\r\n//\r\n//     // вынесли в index\r\n//     // let dialogs = [\r\n//     //     {id: 1, name: 'Dimych'},\r\n//     //     {id: 2, name: 'User 2'},\r\n//     //     {id: 3, name: 'User 3'},\r\n//     //     {id: 4, name: 'User 4'},\r\n//     //     {id: 5, name: 'User 5'},\r\n//     //     {id: 6, name: 'User 6'},\r\n//     // ]\r\n//     //\r\n//     // let messages = [\r\n//     //     {id: 1, message: 'Hi'},\r\n//     //     {id: 2, message: 'Ho'},\r\n//     //     {id: 3, message: 'Yo'},\r\n//     // ]\r\n//\r\n//     let dialogsElements = props.state.dialogs.map((d) => <DialogItem name={d.name} id={d.id}/>)\r\n//     // [\r\n//     // <DialogItem name={dialogs[0].name} id={dialogs[0].id}/>,\r\n//     //     <DialogItem name={dialogs[1].name} id={dialogs[1].id}/>,\r\n//     //     <DialogItem name={dialogs[2].name} id={dialogs[2].id}/>,\r\n//     //     <DialogItem name={dialogs[3].name} id={dialogs[3].id}/>,\r\n//     //     <DialogItem name={dialogs[4].name} id={dialogs[4].id}/>,\r\n//     //     <DialogItem name={dialogs[5].name} id={dialogs[5].id}/>,\r\n//     // ]\r\n//     // создает массив\r\n//\r\n//     let messagesElements = props.state.messages.map((m) => <Message message={m.message}/>)\r\n//     return (\r\n//         <div className={s.dialogs}>\r\n//             <div className={s.dialogsItems}>\r\n//                 {dialogsElements}\r\n//\r\n//             </div>\r\n//             <div className={s.messages}>\r\n//\r\n//                 {/*<Message message={messages[0].message}/>*/}\r\n//                 {/*<Message message={messages[1].message}/>*/}\r\n//                 {/*<Message message={messages[2].message}/>*/}\r\n//\r\n//                 {messagesElements}\r\n//                 <textarea ref={newMessageElement}></textarea>\r\n//                 <div>\r\n//                     <button onClick={addMessage}>Send message</button>\r\n//                 </div>\r\n//             </div>\r\n//\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export default Dialogs","import React, {Component, ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: any): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n// export const WithAuthRedirect = <T>(Component: ComponentType<T>) => {\r\n//     debugger\r\n//     function RedirectComponent (props: MapStateToPropsForRedirectType) {\r\n//             if (!props.isAuth) return <Redirect to='/login'/>\r\n//             return <Component {...props}/>\r\n//     }\r\n\r\n    // export function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n        // function RedirectComponent (props: MapStateToPropsForRedirectType) {\r\n        //     let {isAuth, ...restProps} = props\r\n        //     if (!isAuth) return <Redirect to='/login'/>\r\n        //     return <Component {...restProps as T}/>\r\n        // }\r\n    // }\r\n        export const WithAuthRedirect = (Component: any) => {\r\n        class RedirectComponent extends React.Component {\r\n            render() {\r\n                // if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n            }\r\n        }\r\n\r\n    let ConnectAuthRedirectComponent: any = connect (mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectAuthRedirectComponent\r\n}\r\n\r\n","import React from \"react\";\r\nimport {StoreType} from \"../../redux/store\";\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype DialogsPropsType = {\r\n    store: StoreType\r\n    // state: DialogPageType\r\n    // updateNewMessageText: (newMessage: any) => void\r\n    // addMessage: (newMessageText:string) => void\r\n    // dispatch: any\r\n}\r\n//2 заменили на connect\r\n// const DialogsContainer = (props: any) => {\r\n//     // debugger\r\n//     let state = props.store.getState().dialogsPage\r\n//\r\n//     const onSendMessageClick = () => {\r\n//         props.store.dispatch(sendMessageCreator())\r\n//\r\n//     }\r\n//\r\n//     let onNewMessageChange = (body:any) => {\r\n//         props.store.dispatch(updateNewMessageBodyCreator(body))\r\n//     }\r\n//\r\n//     return (\r\n//         <Dialogs\r\n//         updateNewMessageBody={onNewMessageChange}\r\n//         sendMessage={onSendMessageClick}\r\n//         dialogsPage={state}/>\r\n//     )\r\n// }\r\n\r\n// возвращают объекты, которые передаются параметрами\r\n// data\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n// callbacks\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        // updateNewMessageBody: (body: any) => {\r\n        //     dispatch(updateNewMessageBodyCreator(body))\r\n        // },\r\n        sendMessage: (newMessageBody: any) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent = WithAuthRedirect(Dialogs)\r\n\r\n\r\n//connect() - вызывает функцию connect, которая вернула другую функцию, которую вызываем connect()()\r\n//connect()(Dialogs) - вызываем контейнерную компоненту, которая передает данные в Dialogs\r\n//connect создает контейнерную компоненту, внутри которой рендерит презентационную и внутрь презентационной передает свойства mapStateToProps, mapDispatchToProps\r\n// @ts-ignore\r\n// let DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\n// export default DialogsContainer\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n"],"names":["props","path","id","className","s","to","src","url","name","message","maxLength300","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}
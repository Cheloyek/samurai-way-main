{"version":3,"file":"static/js/528.9d3b1208.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__Yxcc1\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__qP2Lm\"};","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props: any) => {\r\n    console.log(props,'props')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'add status'}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} type=\"text\" autoFocus={true}\r\n                           onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userImg from './../../../assets/images/user.png'\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto}:any) => {\r\n    if (profile === null) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onProfilePhotoSelected = (e: any) => {\r\n        if(e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src=\"https://media.istockphoto.com/photos/abstract-curved-shapes-picture-id1340367001?b=1&k=20&m=1340367001&s=170667a&w=0&h=rEDszAkp7zRWyHBRPcIwFecc0QlbZNhc0sM62rjAa3U=\"\r\n                    alt=\"\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={profile.photos.small || userImg} style={{width: \"100px\", height: \"100px\"}}/>\r\n                    {isOwner && <input type={\"file\"} onChange={onProfilePhotoSelected}/>}\r\n                </div>\r\n                <div>fullName: {profile.fullName}</div>\r\n                <div>description: {profile.aboutMe}</div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"MyPosts_button__3MkfA\",\"posts\":\"MyPosts_posts__+R4p4\",\"postsBlock\":\"MyPosts_postsBlock__mow08\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__2Hkfv\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\nexport type PostPropsType = {\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\n//3\r\nconst Post = (props: PostPropsType) => {\r\n    //вынесли в profile, из profile вынесли в app\r\n    // let posts = [\r\n    //     {id: 1, message: 'abc', likesCount: '0'},\r\n    //     {id: 2, message: 'defg', likesCount: '26'},\r\n    // ]\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQWTNABIQRWeG_2QrZG-bg5g61ZgBytCh923w&usqp=CAU\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\n//4\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    newPostText?: string\r\n    // dispatch: (action: {type: string}) => void\r\n    addPost: any\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\n// props из app -> profile передается в MyPosts\r\nconst MyPosts = React.memo((props: any) => {\r\n    let postsElements = [...props.posts].reverse().map((p: PostType) => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    //React.createRef() - создается ссылка на элемент textarea\r\n    let newPostElement: any = React.createRef()\r\n\r\n    //callback функция при нажатии на кнопку Add post, обращается к newPostElement считывает current.value\r\n    const onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText) // заменили на dispatch\r\n        //очищает textarea после добавления post (после нажатия кнопки Add post)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                <div>\r\n                    New post\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {/*<Post message={posts[0].message} likesCount={posts[0].likesCount}/>*/}\r\n                    {/*<Post message={posts[1].message} likesCount={posts[1].likesCount}/>*/}\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} validate={[required, maxLength10]} placeholder={'Post message'}/>\r\n            </div>\r\n            <div>\r\n                <button className={s.button}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {PostType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n//4\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n    dispatch: (action: {type: string}) => void\r\n    addPost: any\r\n    updateNewPostText: string\r\n}\r\n\r\n// props из app -> profile передается в MyPosts\r\n// заменили на connect\r\n// const MyPostsContainer = (props: any) => {\r\n//     // debugger\r\n//     let state = props.store.getState()\r\n//     //callback функция при нажатии на кнопку Add post, обращается к newPostElement считывает current.value\r\n//     const addPost = () => {\r\n//         props.store.dispatch(addPostActionCreator())\r\n//     }\r\n//\r\n//     // срабатывает когда пытаемся изменить textarea\r\n//     let onPostChange = (text: string) => {\r\n//         let action = updateNewPostTextActionCreator(text)\r\n//         props.store.dispatch(action)\r\n//     }\r\n//\r\n//     return (<MyPosts\r\n//         posts={state.profilePage.posts}\r\n//         addPost={addPost}\r\n//         updateNewPostText={onPostChange}\r\n//         newPostText={state.profilePage.newPostText}/>)\r\n// }\r\n\r\n//выполняется при каждом изменении в state и сравнивается содержимое, если что-то в state изменилось, кроме указанного в функции\r\n//то не перерисовывает\r\nlet mapStateToProps = (state: any) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addPost: (newPostText: any) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React, {Dispatch} from \"react\";\r\nimport s from './Profile.module.css'\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {AnyAction} from \"redux\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePageType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    isOwner: boolean,\r\n    profile: any,\r\n    status: any,\r\n    updateStatus: any,\r\n    savePhoto: any\r\n    // store?: any\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    //вынесли в app, получили из app через props, передали через props.posts в MyPosts\r\n// let posts = [\r\n//     {id: 1, message: 'abc', likesCount: '0'},\r\n//     {id: 2, message: 'defg', likesCount: '26'},\r\n// ]\r\n    return (\r\n        <div>\r\n                <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} savePhoto={props.savePhoto}/>\r\n                {/*<MyPostsContainer store={props.store}/>*/}\r\n                <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, {Dispatch} from \"react\";\r\nimport {AnyAction, compose} from \"redux\";\r\nimport {getStatus, getUserProfile, ProfilePageType, savePhoto, updateStatus} from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\n\r\ntype ProfilePropsType = {\r\n    profilePage: ProfilePageType\r\n    dispatch: Dispatch<AnyAction>\r\n}\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: number\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    setUsers: (profile: any) => void\r\n}\r\n\r\ntype OwnPropsType = MapStateToPropsForRedirectType & MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<any, any> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any) {\r\n        console.log('this.props.match.params.userId', this.props.match.params.userId, 'prevProps', prevProps)\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n//hoc\r\n// let AuthRedirectComponent: any = WithAuthRedirect(ProfileContainer)\r\n\r\n\r\nlet mapStateToProps = (state: any): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,  //?\r\n    isAuth: state.auth.isAuth //?\r\n\r\n})\r\n\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent) //withRouter добавит в ProfileContainer данные из url\r\n// export default connect(mapStateToProps, {getUserProfile}) (WithUrlDataContainerComponent);\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n"],"names":["props","console","log","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","type","autoFocus","onBlur","updateStatus","profile","isOwner","savePhoto","Preloader","src","alt","className","s","photos","small","userImg","style","width","height","target","files","length","fullName","aboutMe","message","likesCount","MyPosts","React","postsElements","posts","reverse","map","p","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","connect","state","profilePage","dispatch","addPostActionCreator","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter"],"sourceRoot":""}
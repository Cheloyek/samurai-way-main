{"version":3,"file":"static/js/854.a98b2792.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__Yxcc1\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__qP2Lm\"};","import React, {useEffect, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'add status'}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} type=\"text\" autoFocus={true}\r\n                           onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport {LoginFormDataType} from \"../../login/Login\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n            <div>\r\n                fullName: {createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\r\n            </div>\r\n            <div>\r\n                looking for a job: {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n            </div>\r\n            <div>\r\n                Skills:{createField<ProfileTypeKeys>('Skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n        <div>\r\n            about me:{createField<ProfileTypeKeys>('about me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n            <div>contacts: {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key}>{key}: {createField(key, 'contacts.' + key, [], Input)}</div>\r\n            })}</div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, ChangeEventHandler, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userImg from './../../../assets/images/user.png'\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: any\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype ProfileDataType = {\r\n    profile: ProfileType,\r\n    isOwner: boolean,\r\n    changeMode: () => void\r\n}\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onProfilePhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {/*<img*/}\r\n                {/*    src=\"https://media.istockphoto.com/photos/abstract-curved-shapes-picture-id1340367001?b=1&k=20&m=1340367001&s=170667a&w=0&h=rEDszAkp7zRWyHBRPcIwFecc0QlbZNhc0sM62rjAa3U=\"*/}\r\n                {/*    alt=\"\"/>*/}\r\n            </div>\r\n            <div>\r\n                <img src={profile.photos.small || userImg} style={{width: \"100px\", height: \"100px\"}}/>\r\n                {isOwner && <input type={\"file\"} onChange={onProfilePhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm\r\n                        profile={profile} initialValues={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} changeMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>\r\n                }\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, changeMode}) => {\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            {isOwner && <div>\r\n                <button onClick={changeMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                fullName: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                description: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>skills: {profile.lookingForAJobDescription}</div>\r\n            }\r\n            <div>\r\n                about me: {profile.aboutMe}\r\n            </div>\r\n\r\n            <div>contacts: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div>{contactTitle}: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"MyPosts_button__3MkfA\",\"posts\":\"MyPosts_posts__+R4p4\",\"postsBlock\":\"MyPosts_postsBlock__mow08\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__2Hkfv\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\nexport type PostPropsType = {\r\n    message: string\r\n    likesCount: string\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQWTNABIQRWeG_2QrZG-bg5g61ZgBytCh923w&usqp=CAU\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport React from \"react\";\r\nimport {LoginFormDataType, LoginFormValuesTypeKeys} from \"../../login/Login\";\r\n\r\ntype PropsType = {\r\n\r\n}\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>('Post message', \"newPostText\", [required, maxLength10], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button className={s.button}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({\r\n    form: 'profile-add-post'\r\n})(AddNewPostForm)","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../types/types\";\r\nimport AddNewPostForm, {AddPostFormValuesType} from \"./AddNewPostForm\";\r\n\r\nexport type MapPropsType = {\r\n    posts: PostType[]\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = React.memo((props) => {\r\n    let postsElements = [...props.posts].reverse().map((p: PostType) => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddNewPostForm onSubmit={onAddPost}/>\r\n                <div>\r\n                    New post\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator\r\n})(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus} saveProfile={props.saveProfile} savePhoto={props.savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n    savePhoto: (file: File) => void\r\n}\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId: number | null = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId as number)\r\n        this.props.getStatus(userId as number)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<PropsType>) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                // @ts-ignore\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, saveProfile, savePhoto}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","type","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","createField","Input","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","changeMode","s","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","savePhoto","saveProfile","Preloader","src","photos","small","userImg","width","height","target","files","length","initialValues","formData","then","alt","message","likesCount","maxLength10","maxLengthCreator","required","React","postsElements","posts","reverse","p","id","values","addPost","newPostText","connect","state","profilePage","actions","MyPosts","ProfileContainer","userId","Number","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","compose","auth","isAuth","withRouter"],"sourceRoot":""}